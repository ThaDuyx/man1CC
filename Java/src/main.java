import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.util.*;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("Simple calculator\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        simpleCalcLexer lex = new simpleCalcLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        simpleCalcParser parser = new simpleCalcParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.simpleCalcLanguage();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Double result=interpreter.visit(parseTree);

        System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

    // An environment mapping variablenames to double values (initially empty)
    public static HashMap<String, Double> env = new HashMap<String, Double>();


    @Override
    public Double visitSimpleCalcLanguage(simpleCalcParser.SimpleCalcLanguageContext ctx) {
        for (simpleCalcParser.CommandsContext a : ctx.cm)
            visit(a);
        for (simpleCalcParser.While_loopContext b : ctx.wl){
            visit(b);
        }
        for(simpleCalcParser.If_stateContext c : ctx.is){
            visit(c);
        }
        return visit(ctx.e);
    }

    @Override
    public Double visitCommands(simpleCalcParser.CommandsContext ctx) {
        String varname = ctx.x.getText();
        Double v = visit(ctx.e);
        env.put(varname, v);

        return v;
    }

    @Override
    public Double visitCommand(simpleCalcParser.CommandContext ctx) {
        return visit(ctx.com);
    }

    @Override
    public Double visitFunctions(simpleCalcParser.FunctionsContext ctx) {
        for (simpleCalcParser.FunctionContext funs : ctx.funs){
            visit(funs);
        }
        return null;
    }

    @Override
    public Double visitWhile(simpleCalcParser.WhileContext ctx) {
        while (visit(ctx.cond) == 1.0) {
            visit(ctx.fun);
        }
        return null;
    }

    @Override
    public Double visitIf(simpleCalcParser.IfContext ctx) {
        if(visit(ctx.cond) == 1.0) {
            visit(ctx.fun);
        }
        return null;
    }

    @Override
    public Double visitIfelse(simpleCalcParser.IfelseContext ctx) {
        if(visit(ctx.cond) == 1.0) {
            visit(ctx.fun1);
        } else {
            visit(ctx.fun2);
        }
        return null;
    }

    @Override
    public Double visitExpress(simpleCalcParser.ExpressContext ctx) {
        return visit(ctx.exp);
    }


    @Override
    public Double visitGreat(simpleCalcParser.GreatContext ctx) {
        if (visit(ctx.e1) < visit(ctx.e2)) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitLess(simpleCalcParser.LessContext ctx) {
        if (visit(ctx.e1) > visit(ctx.e2)) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitGreatEQ(simpleCalcParser.GreatEQContext ctx) {
        if (visit(ctx.e1) <= visit(ctx.e2)) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitLessEQ(simpleCalcParser.LessEQContext ctx) {
        if (visit(ctx.e1) >= visit(ctx.e2)) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitNotEQ(simpleCalcParser.NotEQContext ctx) {
        if (!visit(ctx.e1).equals(visit(ctx.e2))) {
            return 1.0;
        } else return null;
    }

    @Override
    public Double visitEQ2x(simpleCalcParser.EQ2xContext ctx) {
        if (visit(ctx.e1).equals(visit(ctx.e2))) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitNot(simpleCalcParser.NotContext ctx) {
        if (visit(ctx.cond) == 1.0) {
            return 0.0;
        } else return 1.0;
    }

    @Override
    public Double visitOr(simpleCalcParser.OrContext ctx) {
        if (visit(ctx.cond1) == 1.0 || visit(ctx.cond2) == 1.0) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitAnd(simpleCalcParser.AndContext ctx) {
        if (visit(ctx.cond1) == 1.0 && visit(ctx.cond2) == 1.0) {
            return 1.0;
        } else return 0.0;
    }

    @Override
    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx) {
        return visit(ctx.e);
    }

    @Override
    public Double visitMultiplication(simpleCalcParser.MultiplicationContext ctx) {
        if (ctx.op.getText().equals("*"))
            return visit(ctx.e1) * visit(ctx.e2);
        else
            return visit(ctx.e1) / visit(ctx.e2);
    }

    @Override
    public Double visitAddition(simpleCalcParser.AdditionContext ctx) {
        if (ctx.op.getText().equals("+"))
            return visit(ctx.e1) + visit(ctx.e2);
        else
            return visit(ctx.e1) - visit(ctx.e2);

    }
    /*
    @Override
    public Double visitNMA(simpleCalcParser.NMAContext ctx) {
        return Double.parseDouble(ctx.c.getText());
    }*/


    @Override
    public Double visitVariable(simpleCalcParser.VariableContext ctx) {
        String varname = ctx.x.getText();
        Double d = env.get(varname);
        if (d == null) {
            System.err.println("Variable " + varname + " is not defined.\n");
            System.exit(-1);
        }
        return d;
    }

    @Override
    public Double visitConstant(simpleCalcParser.ConstantContext ctx) {
        return Double.parseDouble(ctx.c.getText());
    }

    @Override
    public Double visitSignedConstant(simpleCalcParser.SignedConstantContext ctx) {
        return Double.parseDouble(ctx.getText());
    }
}
